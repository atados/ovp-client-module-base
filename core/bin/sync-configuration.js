const legacyGlob = require('glob')
const chalk = require('chalk')
const path = require('path')
const fs = require('fs')
const mkdirp = require('mkdirp')
const compareVersions = require('compare-versions')
const { promisify } = require('util')

const stat = promisify(fs.stat)
const glob = promisify(legacyGlob)
const readFile = promisify(fs.readFile)
const writeFile = promisify(fs.writeFile)
const createDir = promisify(mkdirp)

async function main() {
  const matches = await glob(
    path.resolve('base', 'core', 'config', '{.,}**/**'),
  )

  return Promise.all(
    matches.map(async filepath => {
      const relFilename = path.relative(
        path.resolve('base', 'core', 'config'),
        filepath,
      )
      const newFilePath = path.resolve(relFilename)
      await createDir(path.dirname(relFilename))
      const fileStat = await stat(filepath)
      let isAutoGeneratedFile = false

      if (fileStat.isDirectory()) {
        return
      }

      try {
        const targetPathStat = await stat(newFilePath)

        if (targetPathStat.isDirectory()) {
          console.error(
            `> Failed to create '${chalk.cyan(
              relFilename,
            )}'. It already exists as a directory`,
          )
          return
        } else {
          const fileContent = await readFile(newFilePath, 'utf8')

          const isHashtagComment = relFilename.endsWith('.yaml')
          fileContent.split('\n').some(line => {
            const isComment = isHashtagComment
              ? line.trim().startsWith('#')
              : line.trim().startsWith('//')
            if (isComment && line.includes('@channel:update')) {
              isAutoGeneratedFile = true
              return true
            }

            return !isComment
          })

          if (relFilename === 'package.json') {
            try {
              // Parse the current package.json version and the new package.json version
              // If the new version is greater than the current one, write the channel package.json
              // If the current version is greater than the current one, write the base package.json
              // If they are equal we can continue
              const channelPkg = JSON.parse(fileContent)
              const baseFileContent = await readFile(filepath, 'utf8')
              const basePkg = JSON.parse(baseFileContent)

              const comparison = compareVersions(
                basePkg.version,
                channelPkg.version,
              )

              if (comparison === 1) {
                console.log(
                  `> Atualizando ${chalk.cyan(path.join('package.json'))}`,
                )
                return writeFile(path.resolve('package.json'), baseFileContent)
              } else if (comparison === -1) {
                console.log(
                  `> Atualizando ${chalk.cyan(
                    path.join('base', 'core', 'config', 'package.json'),
                  )}`,
                )
                return writeFile(
                  path.resolve('base', 'core', 'config', 'package.json'),
                  fileContent,
                )
              } else {
                if (JSON.stringify(channelPkg) !== JSON.stringify(basePkg)) {
                  console.log(
                    chalk.red(
                      `> Erro encontrado no ${chalk.cyan(
                        'package.json',
                      )}. A versão é igual a da base, mas o conteúdo é diferente (${
                        channelPkg.version
                      })`,
                    ),
                  )
                  process.exit(1)
                }

                return console.log(
                  chalk.gray(
                    `> Pulando ${chalk.cyan(
                      'package.json',
                    )} porque a versão é igual a da base (${
                      channelPkg.version
                    })`,
                  ),
                )
              }
            } catch (error) {
              console.error(chalk.red(`> Falha ao atualizar o package.json`))
              console.error(error)
            }
          }

          if (!isAutoGeneratedFile) {
            console.log(
              chalk.gray(
                `> Pulando ${chalk.cyan(relFilename)} porque já existe`,
              ),
            )
            // Skip since the we shouldn't override the current content
            return
          }
        }
      } catch (error) {
        // File doesn't exist yet. Continue
      }

      if (filepath.endsWith('.js')) {
        console.log(
          `> ${isAutoGeneratedFile ? 'Atualizando' : 'Criando'} ${chalk.cyan(
            relFilename,
          )}`,
        )
        writeFile(
          newFilePath,
          `// Este arquivo é criado automaticamente.\n` +
            `// Remova a linha seguinte caso queira controlá-lo manualmente.\n` +
            `// @channel:update\n` +
            `module.exports = require('./${path.join(
              'base',
              'core',
              'config',
              path.basename(relFilename, path.extname(relFilename)),
            )}')\n`,
          'utf8',
        )
      } else {
        console.log(
          `> ${isAutoGeneratedFile ? 'Atualizando' : 'Criando'} ${chalk.cyan(
            relFilename,
          )}`,
        )
        fs.copyFileSync(filepath, newFilePath)
      }
    }),
  )
}

main()
